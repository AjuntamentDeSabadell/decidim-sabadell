version: '3'
services:
  app:
    entrypoint: ["./docker-entrypoint.sh"]
    command: bundle exec rails server -p 3000 -b 0.0.0.0
    environment:
      - 'DATABASE_URL=postgres://postgres@postgres:5432/decidim_sabadell'
      - FORCE_SSL=yes
      - MEMCACHED_HOST=memcached
      - POSTGRES_HOST=postgres
      - 'REDIS_URL=redis://redis:6379/1'
      - SECRET_KEY_BASE=SECRET_KEY_BASE_VALUE
      - SMTP_ADDRESS=SMTP_ADDRESS_VALUE
      - SMTP_DOMAIN=SMTP_DOMAIN_VALUE
      - SMTP_PASSWORD=SMTP_PASSWORD_VALUE
      - SMTP_PORT=SMTP_PORT_VALUE
      - SMTP_USERNAME=SMTP_USERNAME_VALUE
      - VIRTUAL_HOST=VIRTUAL_HOST_VALUE
      - GEOCODER_LOOKUP_APP_ID=GEOCODER_LOOKUP_APP_ID_VALUE
      - GEOCODER_LOOKUP_APP_CODE=GEOCODER_LOOKUP_APP_CODE_VALUE
    image: 'ajsabadell/decidim-sabadell:DOCKER_IMAGE_TAG_VALUE'
    volumes:
      - '/var/decidim/uploads:/code/public/uploads'
      - '/var/decidim/logs:/code/log'
    deploy:
      replicas: 1
      update_config:
        parallelism: 1
      restart_policy:
        condition: on-failure
      labels:
        - com.df.notify=true
        - com.df.port=3000
        - com.df.serviceDomain=decidim.sabadell.cat
  app-worker:
    command: bundle exec sidekiq -C config/sidekiq.yml
    environment:
      - 'DATABASE_URL=postgres://postgres@postgres:5432/decidim_sabadell'
      - FORCE_SSL=yes
      - MEMCACHED_HOST=memcached
      - POSTGRES_HOST=postgres
      - 'REDIS_URL=redis://redis:6379/1'
      - SECRET_KEY_BASE=SECRET_KEY_BASE_VALUE
      - SMTP_ADDRESS=SMTP_ADDRESS_VALUE
      - SMTP_DOMAIN=SMTP_DOMAIN_VALUE
      - SMTP_PASSWORD=SMTP_PASSWORD_VALUE
      - SMTP_PORT=SMTP_PORT_VALUE
      - SMTP_USERNAME=SMTP_USERNAME_VALUE
      - GEOCODER_LOOKUP_APP_ID=GEOCODER_LOOKUP_APP_ID_VALUE
      - GEOCODER_LOOKUP_APP_CODE=GEOCODER_LOOKUP_APP_CODE_VALUE
    image: 'ajsabadell/decidim-sabadell:DOCKER_IMAGE_TAG_VALUE'
    volumes:
      - '/var/decidim/uploads:/code/public/uploads'
    deploy:
      replicas: 1
      update_config:
        parallelism: 1
      restart_policy:
        condition: on-failure
  letsencrypt-companion:
    image: hamburml/docker-flow-letsencrypt:latest
    environment:
      - DOMAIN_1=('decidim.sabadell.cat')
      - CERTBOT_EMAIL=decidim@sabadell.cat
      - PROXY_ADDRESS=proxy
      - CERTBOT_CRON_RENEW=('0 3 * * *' '0 15 * * *')
    volumes:
      - '/var/decidim/certs:/etc/letsencrypt'
    deploy:
      labels:
        - com.df.servicePath=/.well-known/acme-challenge
        - com.df.notify=true
        - com.df.distribute=true
        - com.df.port=80
      placement:
        constraints: [node.id == <nodeId>]
      replicas: 1
  memcached:
    image: 'memcached:alpine'
    deploy:
      replicas: 1
      update_config:
        parallelism: 1
      restart_policy:
        condition: on-failure
  proxy:
    image: dockerflow/docker-flow-proxy
    ports:
      - 80:80
      - 443:443
    environment:
      - LISTENER_ADDRESS=swarm-listener
      - MODE=swarm
    volumes:
      - '/var/decidim/certs:/certs'
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
  swarm-listener:
    image: dockerflow/docker-flow-swarm-listener
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - DF_NOTIFY_CREATE_SERVICE_URL=http://proxy:8080/v1/docker-flow-proxy/reconfigure
      - DF_NOTIFY_REMOVE_SERVICE_URL=http://proxy:8080/v1/docker-flow-proxy/remove
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
  postgres:
    environment:
      - POSTGRES_DB=decidim_sabadell
      - POSTGRES_PASSWORD=
      - POSTGRES_USERNAME=decidim
    image: 'postgres:9.6.10'
    volumes:
      - '/var/decidim/postgresql/data:/var/lib/postgresql/data'
    deploy:
      replicas: 1
      update_config:
        parallelism: 1
      restart_policy:
        condition: on-failure
  postgres-backups:
    environment:
      - MAX_BACKUPS=30
      - POSTGRES_DB=decidim_sabadell
      - POSTGRES_HOST=postgres
      - 'POSTGRES_PASSWORD=""'
      - POSTGRES_USER=postgres
      - POSTGRES_PORT=5432
    image: 'jmcarbo/docker-postgres-backup:latest'
    volumes:
      - '/var/decidim/backups:/backup'
    deploy:
      replicas: 1
      update_config:
        parallelism: 1
      restart_policy:
        condition: on-failure
  redis:
    image: 'redis:latest'
    deploy:
      replicas: 1
      update_config:
        parallelism: 1
      restart_policy:
        condition: any
